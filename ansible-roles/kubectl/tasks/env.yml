---

- name: kubectl assume role
  community.aws.sts_assume_role:
    role_arn: "{{ kubectl_aws_role_arn }}"
    role_session_name: assumeRoleSession
  environment:
    AWS_ACCESS_KEY_ID: "{{ kubectl_aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ kubectl_aws_secret_access_key }}"
    AWS_SESSION_TOKEN: "{{ kubectl_aws_session_token }}"
  when:
    - kubectl_aws_role_arn
  register: assumed_role

- name: Set kubectl assume role facts
  set_fact:
    kubectl_aws_access_key_id: "{{ assumed_role.sts_creds.access_key }}"
    kubectl_aws_secret_access_key: "{{ assumed_role.sts_creds.secret_key }}"
    kubectl_aws_session_token: "{{ assumed_role.sts_creds.session_token }}"
  when:
    - kubectl_aws_role_arn

- name: Setup kubectl environment
  set_fact:
    kubectl_env:
      AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
      AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
      AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
      KUBECONFIG: "{{kubectl_config_path}}"

- name: Configure kubectl for EKS
  command:
    argv:
      - aws
      - "--region={{kubectl_eks_region|quote}}"
      - eks
      - update-kubeconfig
      - "--name={{kubectl_eks_cluster_name|quote}}"
      - --debug
  environment: "{{ kubectl_env }}"
  when:
    - kubectl_configure

- name: Setup kubectl as configured
  set_fact:
    kubectl_configured: yes

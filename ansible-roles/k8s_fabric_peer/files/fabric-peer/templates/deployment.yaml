apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fabric-peer.fullname" . }}
  labels:
    {{- include "fabric-peer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
    rollingUpdate: !!null
  selector:
    matchLabels:
      {{- include "fabric-peer.match-labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "fabric-peer.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "fabric-peer.serviceAccountName" . }}
      volumes:
        {{- if .Values.externalChaincode }}
        - name: buildpacks
          emptyDir: {}
        {{- end }}
        {{- if .Values.dockerChaincode }}
        - name: docker-tls
          emptyDir: {}
        - name: chaincode-archives
          emptyDir: {}
        - name: docker-storage
          persistentVolumeClaim:
            claimName: {{ list "dockerstorage" . | include "fabric-peer.pvc" }}
        {{- end }}
        - name: genesisblock
          emptyDir: {}
        - name: orderertls
          emptyDir: {}
        - name: msp
          emptyDir: {}
        - name: adminmsp
          emptyDir: {}
        - name: tls
          emptyDir: {}
        - name: config
          configMap:
            name: {{ .Values.coreConfigMap }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ list "storage" . | include "fabric-peer.pvc" }}
        {{- if .Values.dlt.cryptoConfigSecret }}
        - name: fabric-crypto-config
          secret:
            secretName: {{ .Values.dlt.cryptoConfigSecret }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.global.hyperledger.fabricVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.startService }}
          args:
            - peer
            - node
            - start
          {{- else }}
          command:
            - /bin/sh
            - -c
            - while true; do sleep 10; done
          {{- end }}
          env:
            - name: FABRIC_CFG_PATH
              value: /etc/hyperledger/fabric/
            {{- if .Values.logGrpc }}
            - name: GRPC_GO_LOG_VERBOSITY_LEVEL
              value: "99"
            - name: GRPC_GO_LOG_SEVERITY_LEVEL
              value: info
            {{- end }}
            - name: PEER_INDEX
              value: "{{ .Values.dlt.peerIndex }}"
            - name: FABRIC_LOGGING_SPEC
              value: {{ .Values.logLevel }}
            - name: CORE_PEER_ADDRESS
              value: {{ include "fabric-peer.self-fqdn" . }}:{{ .Values.internal.container.gossipPort }}
            - name: CORE_PEER_KEEPALIVE_MININTERVAL
              value: {{ .Values.internal.container.keepaliveMinInterval }}
            - name: CORE_PEER_KEEPALIVE_CLIENT_INTERVAL
              value: {{ .Values.internal.container.keepaliveClientInterval }}
            - name: CORE_PEER_KEEPALIVE_DELIVERYCLIENT_INTERVAL
              value: {{ .Values.internal.container.keepaliveDeliveryClientInterval }}
            - name: CORE_PEER_GOSSIP_EXTERNALENDPOINT
              value: {{ include "fabric-peer.self-fqdn" . }}:{{ .Values.internal.container.gossipPort }}
            - name: CORE_PEER_GOSSIP_BOOTSTRAP
              value: {{ list 0 . | include "fabric-peer.fqdn" }}:{{ .Values.internal.container.gossipPort }}
            - name: CORE_PEER_CHAINCODELISTENADDRESS
              value: "localhost:{{ .Values.internal.container.chaincodePort }}"
            {{- if .Values.dlt.hcs }}
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "true"
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "false"
            {{- else }}
            - name: CORE_PEER_GOSSIP_ORGLEADER
              value: "true"
            - name: CORE_PEER_GOSSIP_USELEADERELECTION
              value: "false"
            - name: CORE_PEER_GOSSIP_STATE_ENABLED
              value: "false"
            - name: CORE_PEER_DELIVERYCLIENT_BLOCKGOSSIPENABLED
              value: "false"
            {{- end }}
            - name: CORE_PEER_ID
              value: {{ include "fabric-peer.self-fqdn" . }}
            - name: CORE_PEER_LOCALMSPID
              value: {{ .Values.dlt.mspID }}
            - name: CORE_PEER_PROFILE_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_CERT_FILE
              value: /etc/hyperledger/fabric/tls/server.crt
            - name: CORE_PEER_TLS_CLIENTCERT_FILE
              value: /etc/hyperledger/fabric/tls/server.crt
            - name: CORE_PEER_TLS_KEY_FILE
              value: /etc/hyperledger/fabric/tls/server.key
            - name: CORE_PEER_TLS_CLIENTKEY_FILE
              value: /etc/hyperledger/fabric/tls/server.key
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: /etc/hyperledger/fabric/tls/ca.crt
            - name: CORE_PEER_TLS_CLIENTROOTCAS_FILES
              value: /etc/hyperledger/fabric/tls/ca.crt
            - name: CORE_PEER_MSPCONFIGPATH
              value: /etc/hyperledger/fabric/msp
            {{- if .Values.dockerChaincode }}
            - name: CORE_VM_ENDPOINT
              value: http://localhost:2376
            - name: CORE_VM_DOCKER_TLS_ENABLED
              value: "true"
            - name: CORE_VM_DOCKER_TLS_CA_FILE
              value: /docker-tls/client/ca.pem
            - name: CORE_VM_DOCKER_TLS_CERT_FILE
              value: /docker-tls/client/cert.pem
            - name: CORE_VM_DOCKER_TLS_KEY_FILE
              value: /docker-tls/client/key.pem
            {{- if .Values.chaincode.resourceLimits.memory }}
            - name: CORE_VM_DOCKER_HOSTCONFIG_MEMORY
              value: {{ .Values.chaincode.resourceLimits.memory | int64 | toString | quote }}
            {{- end }}
            {{- end }}
            - name: CORE_OPERATIONS_LISTENADDRESS
              value: "0.0.0.0:{{ .Values.internal.container.operationsPort }}"
            - name: CORE_METRICS_PROVIDER
              value: prometheus
            - name: CORE_CHAINCODE_EXECUTETIMEOUT
              value: {{ .Values.internal.container.invokeTimeout }}
            - name: CORE_PEER_GOSSIP_PVTDATA_PUSHACKTIMEOUT
              value: {{ .Values.internal.container.invokeTimeout }}
            - name: CORE_CHAINCODE_BUILDER
              value: "{{ .Values.buildImage.repository }}:{{ .Values.global.hyperledger.fabricVersion }}"
            - name: CORE_CHAINCODE_STARTUPTIMEOUT
              value: 500s
          ports:
            - name: grpc-svc
              containerPort: {{ .Values.internal.container.servicePort }}
              protocol: TCP
            - name: grpc-cc
              containerPort: {{ .Values.internal.container.chaincodePort }}
              protocol: TCP
            - name: grpc-gossip
              containerPort: {{ .Values.internal.container.gossipPort }}
              protocol: TCP
            - name: http-op
              containerPort: {{ .Values.internal.container.operationsPort }}
              protocol: TCP
          {{- if and .Values.startProbes .Values.startService }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-op
            failureThreshold: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http-op
            initialDelaySeconds: 5
            periodSeconds: 5
          startupProbe:
            httpGet:
              path: /healthz
              port: http-op
            failureThreshold: 30
            periodSeconds: 10
          {{- end }}
          volumeMounts:
            {{- if .Values.externalChaincode }}
            - name: buildpacks
              mountPath: /buildpacks
            {{- end }}
            {{- if .Values.dockerChaincode }}
            - name: docker-tls
              mountPath: /docker-tls
            - name: chaincode-archives
              mountPath: /opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go
            {{- end }}
            - name: genesisblock
              mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
            - name: orderertls
              mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/orderertls
            - name: config
              subPath: core.yaml
              mountPath: /etc/hyperledger/fabric/core.yaml
            - name: msp
              mountPath: /etc/hyperledger/fabric/msp
            - name: tls
              mountPath: /etc/hyperledger/fabric/tls
            - name: storage
              mountPath: /var/hyperledger/production
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.dockerChaincode }}
        - name: docker-chaincodes
          image: docker:stable-dind
          imagePullPolicy: Always
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /docker-tls
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-storage
              mountPath: /var/lib/docker
            - name: docker-tls
              mountPath: /docker-tls
        {{- end }}
        {{- if .Values.fabricSnapshotArchiver.enabled }}
        - name: fabric-snapshot-archiver
          image: "{{ .Values.fabricSnapshotArchiver.image.repository }}:{{ .Values.fabricSnapshotArchiver.image.version }}"
          imagePullPolicy: {{ .Values.fabricSnapshotArchiver.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - sleep infinity
          env:
            - name: AWS_REGION
              value: {{ .Values.global.aws.region }}
            - name: AWS_BUCKET
              value: {{ .Values.global.aws.staticBucket }}
            - name: AWS_BUCKET_PREFIX
              value: "{{ .Values.global.lutherEnv }}/fabric-snapshots"
            - name: FABRIC_CFG_PATH
              value: /etc/hyperledger/fabric/
            - name: FABRIC_LOGGING_SPEC
              value: INFO
            - name: CORE_PEER_ADDRESS
              value: {{ include "fabric-peer.self-fqdn" . }}:{{ .Values.internal.container.gossipPort }}
            - name: CORE_PEER_ID
              value: fabric-snapshot-archiver
            - name: CORE_PEER_LOCALMSPID
              value: {{ .Values.dlt.mspID }}
            - name: CORE_PEER_TLS_ENABLED
              value: "true"
            - name: CORE_PEER_TLS_CLIENTAUTHREQUIRED
              value: "true"
            - name: CORE_PEER_TLS_CERT_FILE
              value: /etc/hyperledger/fabric/tls/server.crt
            - name: CORE_PEER_TLS_KEY_FILE
              value: /etc/hyperledger/fabric/tls/server.key
            - name: CORE_PEER_TLS_CLIENTCERT_FILE
              value: /etc/hyperledger/fabric/tls/server.crt
            - name: CORE_PEER_TLS_CLIENTKEY_FILE
              value: /etc/hyperledger/fabric/tls/server.key
            - name: CORE_PEER_TLS_ROOTCERT_FILE
              value: /etc/hyperledger/fabric/tls/ca.crt
            - name: CORE_PEER_MSPCONFIGPATH
              value: /etc/hyperledger/fabric/msp
          volumeMounts:
            - name: genesisblock
              mountPath: /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
            - name: orderertls
              mountPath: /etc/hyperledger/fabric/orderertls
            - name: config
              subPath: core.yaml
              mountPath: /etc/hyperledger/fabric/core.yaml
            - name: adminmsp
              mountPath: /etc/hyperledger/fabric/msp
            - name: tls
              mountPath: /etc/hyperledger/fabric/tls
            - name: storage
              mountPath: /var/hyperledger/production
          workingDir: /opt/gopath/src/github.com/hyperledger/fabric/peer
          resources:
            {{- toYaml .Values.fabricSnapshotArchiver.resources | nindent 12 }}
        {{- end }}
      initContainers:
        {{- if .Values.externalChaincode }}
        - name: install-buildpack
          image: "{{ .Values.buildpackImage.repository }}:{{ .Values.buildpackImage.version }}"
          args:
            - /buildpacks/substrate
          volumeMounts:
            - name: buildpacks
              mountPath: /buildpacks
        {{- end }}
        {{- if .Values.dockerChaincode }}
        # TODO:  Consider turning chaincode-archive-bootstrap into a sidecar
        # that periodically syncs chaincode archives into a volume that is
        # shared between it and the fabric-peer container.  Without continuous
        # sync the peer needs to restart in order to install/initialize a new
        # version of substrate (not the end of the world because substrate
        # upgrades still require downtime).
        - name: chaincode-archive-bootstrap
          image: "amazon/aws-cli:{{ .Values.awsCLIVersion }}"
          env:
            - name: AWS_REGION
              value: {{ .Values.substrate.s3.region }}
            - name: S3_BUCKET
              value: {{ .Values.substrate.s3.bucket }}
          args:
            - sh
            - -c
            - |
              set -xe;
              aws s3 cp "s3://{{ .Values.substrate.s3.bucket }}/chaincodes/com_luthersystems_chaincode_substrate01-{{ .Values.substrate.version }}.tar.gz" /chaincodes/com_luthersystems_chaincode_substrate01-{{ .Values.substrate.version }}.tar.gz
          volumeMounts:
            - name: chaincode-archives
              mountPath: /chaincodes
        {{- end }}
        {{- if .Values.dlt.cryptoConfigSecret }}
        - name: config-setup
          image: busybox:1.35.0
          args:
            - sh
            - -c
            - |
              set -xe;
              cp /opt/crypto-config/crypto-config.zip /tmp
              cd /tmp
              unzip crypto-config.zip
              cd crypto-config
              # TODO: replace domain var with proper orderer domain
              mv ordererOrganizations/{{ .Values.dlt.domain }}/orderers/orderer0.{{ .Values.dlt.domain }}/msp/tlscacerts/* /orderertls
              mv peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/peers/{{ include "fabric-peer.self-fqdn" . }}/msp/* /msp
              mv peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/peers/{{ include "fabric-peer.self-fqdn" . }}/tls/* /tls
              mv peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/users/Admin@{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/msp/* /adminmsp
          volumeMounts:
            - name: orderertls
              mountPath: /orderertls
            - name: msp
              mountPath: /msp
            - name: adminmsp
              mountPath: /adminmsp
            - name: tls
              mountPath: /tls
            - name: fabric-crypto-config
              mountPath: /opt/crypto-config
              readOnly: true
        {{- else }}
        - name: config-fetch
          image: "amazon/aws-cli:{{ .Values.awsCLIVersion }}"
          env:
            - name: AWS_REGION
              value: {{ .Values.global.aws.region }}
            - name: S3_BUCKET
              value: {{ .Values.global.aws.staticBucket }}
          args:
            - sh
            - -c
            - |
              set -xe;
              aws s3 cp --recursive "s3://{{ .Values.global.aws.staticBucket }}/{{ .Values.global.lutherEnv }}/fabric-artifacts/crypto-config/ordererOrganizations/luther.systems/orderers/orderer0.luther.systems/msp/tlscacerts/" /orderertls
              aws s3 cp --recursive "s3://{{ .Values.global.aws.staticBucket }}/{{ .Values.global.lutherEnv }}/fabric-artifacts/crypto-config/peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/peers/{{ include "fabric-peer.self-fqdn" . }}/msp/" /msp
              aws s3 cp --recursive "s3://{{ .Values.global.aws.staticBucket }}/{{ .Values.global.lutherEnv }}/fabric-artifacts/crypto-config/peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/peers/{{ include "fabric-peer.self-fqdn" . }}/tls/" /tls
              aws s3 cp --recursive "s3://{{ .Values.global.aws.staticBucket }}/{{ .Values.global.lutherEnv }}/fabric-artifacts/crypto-config/peerOrganizations/{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/users/Admin@{{ .Values.dlt.organization }}.{{ .Values.dlt.domain }}/msp/" /adminmsp
          volumeMounts:
            - name: orderertls
              mountPath: /orderertls
            - name: msp
              mountPath: /msp
            - name: adminmsp
              mountPath: /adminmsp
            - name: tls
              mountPath: /tls
        {{- end }}
      nodeSelector:
        topology.kubernetes.io/zone: {{ .Values.availabilityZone }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
# tasks file for k8s_fabric_peer

- name: K8s namespace exists
  k8s:
    name: "{{k8s_fabric_peer_namespace}}"
    api_version: v1
    kind: Namespace
    state: present
  environment: "{{ kubectl_env }}"

- name: ConfigMap directory exists
  file:
    path: "{{k8s_fabric_peer_configmap_path | dirname}}"
    state: directory

- name: ConfigMap is rendered
  template:
    src: configmap.yaml.j2
    dest: "{{k8s_fabric_peer_configmap_path}}"

- name: K8s ConfigMap exists
  k8s:
    src: "{{k8s_fabric_peer_configmap_path}}"
  environment: "{{ kubectl_env }}"

- name: retrieve peer PV data
  include_role:
    name: k8s_pv_data
  vars:
    org_selector: "fabric/organization={{k8s_fabric_peer_org}}"
    k8s_pv_data_selectors: "{{k8s_fabric_peer_pv_selectors + [org_selector]}}"

- name: Set crypto-config facts
  set_fact:
    k8s_fabric_peer_crypto_config_secret_name: fabric-crypto-config
  when: k8s_fabric_peer_crypto_config

- name: Fabric crypto-config secrets exists
  k8s:
    namespace: "{{k8s_fabric_peer_namespace}}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{crypto_config_secret}}"
      type: Opaque
      data:
        crypto-config.zip: "{{k8s_fabric_peer_crypto_config}}"
  no_log: True
  environment: "{{ kubectl_env }}"
  vars:
    crypto_config_secret: "{{k8s_fabric_peer_crypto_config_secret_name}}"
  when: k8s_fabric_peer_crypto_config

- name: Helm chart exists
  synchronize:
    src: fabric-peer/
    dest: "{{k8s_fabric_peer_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes

- name: Loop is run
  include_tasks: inner.yml
  loop: "{{range(0,k8s_fabric_peer_org_size)|list}}"

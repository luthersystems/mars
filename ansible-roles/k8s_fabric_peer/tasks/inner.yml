---
# tasks file for k8s_fabric_peer loop

- name: Create storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_peer_namespace}}"
    k8s_pvc_name: "storage-fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    k8s_pvc_component: fabric
    k8s_pvc_part_of: bcpeer
    k8s_pvc_storage_size: "{{ k8s_fabric_peer_storage_size_overrides[item] | default(k8s_fabric_peer_storage_size, true) }}"
    k8s_pvc_storage_class: "{{k8s_fabric_peer_storage_class}}"
    k8s_pvc_volume_type_override: "{{k8s_fabric_peer_volume_type_override}}"
  when: k8s_fabric_peer_separate_pvc

- name: Create docker storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_peer_namespace}}"
    k8s_pvc_name: "dockerstorage-fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    k8s_pvc_component: fabric
    k8s_pvc_part_of: bcpeer
    k8s_pvc_storage_size: "{{k8s_fabric_peer_dockerstorage_size}}"
  when: k8s_fabric_peer_separate_pvc and k8s_fabric_peer_chaincode_docker

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_peer_helm_chart_path}}"
    name: "fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    namespace: "{{k8s_fabric_peer_namespace}}"
    wait: true
    values:
      serviceAccount:
        name: "{{k8s_fabric_peer_service_account}}"
      global:
        lutherProjectID: "{{luther_project_id}}"
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_peer_version}}"
        aws:
          region: "{{k8s_fabric_peer_cert_bucket_region or shiro_phylum_s3_region | default('')}}"
          staticBucket: "{{k8s_fabric_peer_cert_bucket or shiro_phylum_s3_bucket | default('')}}"
      dlt:
        organization: "{{k8s_fabric_peer_org}}"
        mspID: "{{k8s_fabric_peer_msp}}"
        domain: "{{k8s_fabric_peer_domain_root}}"
        peerIndex: "{{item}}"
        hcs: "{{k8s_fabric_peer_hcs}}"
        cryptoConfigSecret: "{{k8s_fabric_peer_crypto_config_secret_name}}"
      substrate:
        version: "{{k8s_fabric_peer_substrate_version or shiro_phylum_substrate_version | default('')}}"
      image:
        repository: "{{k8s_fabric_peer_image_repository}}"
      startService: "{{not recovery_mode}}"
      startProbes: "{{k8s_fabric_peer_start_probes}}"
      internal:
        container:
          invokeTimeout: "{{k8s_fabric_peer_chaincode_invoke_timeout}}"
      chaincode:
        resourceLimits:
          memory: "{{k8s_fabric_peer_chaincode_memory_limit}}"
      persistentVolume:
        create: "{{not k8s_fabric_peer_separate_pvc}}"
        storageSize: "{{ storage_size }}"
        storageClassName: "{{k8s_fabric_peer_storage_class}}"
        dockerStorageSize: "{{k8s_fabric_peer_dockerstorage_size}}"
        typeOverride: "{{k8s_fabric_peer_volume_type_override}}"
      logLevel: "{{k8s_fabric_peer_log_level}}"
      availabilityZone: "{{availability_zones[item]}}"
      service:
        type: "{{k8s_fabric_peer_service_type}}"
        idleTimeout: "{{k8s_fabric_peer_lb_idle_timeout}}"
        useNLB: "{{k8s_fabric_peer_use_nlb}}"
      externalChaincode: "{{k8s_fabric_peer_chaincode_external}}"
      ccaasChaincode: "{{k8s_fabric_peer_chaincode_ccaas}}"
      dockerChaincode: "{{k8s_fabric_peer_chaincode_docker}}"
      buildpackImage:
        version: "{{k8s_fabric_peer_buildpack_version}}"
      logGrpc: "{{k8s_fabric_peer_log_grpc}}"
      awsCLIVersion: "{{k8s_fabric_peer_aws_cli_version}}"
      fabricSnapshotArchiver:
        image:
          version: "{{k8s_fabric_peer_snapshot_archiver_version}}"
        enabled: "{{k8s_fabric_peer_use_snapshot_archiver}}"
      local: "{{mars_local | default(false)}}"
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{k8s_fabric_peer_azs or k8s_pv_data_replica_azs}}"
    storage_size: "{{ k8s_fabric_peer_storage_size_overrides[item] | default(k8s_fabric_peer_storage_size, true) }}"
    recovery_mode: "{{ k8s_fabric_peer_recovery_overrides[item] | default(not k8s_fabric_peer_start_service, true) }}"

- name: Upgrade pauser has run
  when: is_fabric_upgrade | bool
  command:
    argv:
      - "{{k8s_fabric_scripts_dir}}/upgrade-pauser.sh"
    chdir: "{{k8s_fabric_scripts_workdir}}"
  environment: "{{ kubectl_env | combine(extra_env_vars) }}"
  vars:
    extra_env_vars:
      PAUSING_AT: peer
      WHICH: "{{ item }}"
      CHANNEL: luther
      ORDERERC: "{{ k8s_fabric_orderer_cluster_size }}"
      PEER_ORG: "{{ k8s_fabric_peer_org }}"

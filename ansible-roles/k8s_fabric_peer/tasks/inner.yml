---
# tasks file for k8s_fabric_peer loop

- name: Create storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_peer_namespace}}"
    k8s_pvc_name: "storage-fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    k8s_pvc_component: fabric
    k8s_pvc_part_of: bcpeer
    k8s_pvc_storage_size: "{{k8s_fabric_peer_storage_size}}"
  when: k8s_fabric_peer_separate_pvc

- name: Create docker storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_peer_namespace}}"
    k8s_pvc_name: "dockerstorage-fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    k8s_pvc_component: fabric
    k8s_pvc_part_of: bcpeer
    k8s_pvc_storage_size: "{{k8s_fabric_peer_dockerstorage_size}}"
  when: k8s_fabric_peer_separate_pvc

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_peer_helm_chart_path}}"
    name: "fabric-peer{{item}}-{{k8s_fabric_peer_org}}"
    namespace: "{{k8s_fabric_peer_namespace}}"
    wait: true
    values:
      global:
        lutherProjectID: "{{luther_project_id}}"
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_version}}"
        aws:
          region: "{{k8s_fabric_peer_cert_bucket_region or shiro_phylum_s3_region}}"
          staticBucket: "{{k8s_fabric_peer_cert_bucket or shiro_phylum_s3_bucket}}"
      dlt:
        organization: "{{k8s_fabric_peer_org}}"
        mspID: "{{k8s_fabric_peer_msp}}"
        domain: "{{k8s_fabric_peer_domain_root}}"
        peerIndex: "{{item}}"
        hcs: "{{k8s_fabric_peer_hcs}}"
      substrate:
        version: "{{k8s_fabric_peer_substrate_version or shiro_phylum_substrate_version}}"
      image:
        repository: "{{k8s_fabric_peer_image_repository}}"
      startService: "{{k8s_fabric_peer_start_service}}"
      internal:
        container:
          invokeTimeout: "{{k8s_fabric_peer_chaincode_invoke_timeout}}"
      chaincode:
        resourceLimits:
          memory: "{{k8s_fabric_peer_chaincode_memory_limit}}"
      persistentVolume:
        create: "{{not k8s_fabric_peer_separate_pvc}}"
        storageSize: "{{k8s_fabric_peer_storage_size}}"
        dockerStorageSize: "{{k8s_fabric_peer_dockerstorage_size}}"
      logLevel: "{{k8s_fabric_peer_log_level}}"
      availabilityZone: "{{availability_zones[item]}}"
      service:
        idleTimeout: "{{k8s_fabric_peer_lb_idle_timeout}}"
        useNLB: "{{k8s_fabric_peer_use_nlb}}"
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{k8s_fabric_peer_azs or k8s_pv_data_replica_azs}}"

- name: Upgrade pauser has run
  when: is_fabric_upgrade | bool
  command:
    argv:
    - "{{k8s_fabric_scripts_dir}}/upgrade-pauser.sh"
    chdir: "{{k8s_fabric_scripts_workdir}}"
  environment:
    PAUSING_AT: "peer"
    WHICH: "{{item}}"
    CHANNEL: "luther"
    ORDERERC: "{{k8s_fabric_orderer_cluster_size}}"
    PEER_ORG: "{{k8s_fabric_peer_org}}"
    AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
    AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
    KUBECONFIG: "{{kubectl_config_path}}"

---
# tasks file for k8s_fabric_chaincode

- name: Check committed chaincode
  command:
    argv:
      - scripts/query-committed.sh
      - "{{ k8s_fabric_chaincode_orgs.0.name }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  register: query_committed
  changed_when: false
  failed_when: false
  tags:
    - prepare_chaincode_upgrade

- name: Store committed facts
  set_fact:
    committed: "{{ committed }}"
    next_sequence: "{{ (sequence | int) + 1 | default(1) }}"
    cc_dash_ver: "{{ k8s_fabric_chaincode_version | replace('.', '-') | lower }}"
  vars:
    committed: "{{ query_committed.rc == 0 }}"
    committed_json: "{{ query_committed.stdout | from_json }}"
    sequence: "{{ committed_json | json_query('sequence') }}"
  tags:
    - prepare_chaincode_upgrade

- name: Install chaincode on peers
  command:
    argv:
      - scripts/install-chaincode.sh
      - "{{ item.0 }}" # org name
      - "{{ item.1 }}" # peer index
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      # e.g. substrate-2-164-0
      - "substrate-{{ cc_dash_ver }}"
      - "2016-01-01T00:00:00Z" # PLT-220: deterministic timestamp
      - "{{ k8s_fabric_chaincode_external }}"
      - "{{ k8s_fabric_chaincode_ccaas }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  loop: "{{ k8s_fabric_chaincode_orgs | org_peer_pairs }}"
  register: install_result
  changed_when: '"peers have installed the chaincode" in install_result.stderr'
  tags:
    - prepare_chaincode_upgrade

- name: Helm chart exists
  synchronize:
    src: chaincode/
    dest: "{{k8s_fabric_chaincode_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes
  when: k8s_fabric_chaincode_external or k8s_fabric_chaincode_ccaas
  tags:
    - prepare_chaincode_upgrade

- name: External chaincode is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_chaincode_helm_chart_path}}"
    name: "substrate-{{ cc_dash_ver }}-peer{{ item.1 }}"
    namespace: "fabric-{{ item.0 }}"
    wait: true
    values:
      image:
        version: "{{k8s_fabric_chaincode_version}}"
      service:
        name: "substrate-{{ cc_dash_ver }}-peer{{ item.1 }}"
      ccid: "{{ k8s_fabric_chaincode_ccid_override | default(install_result.results[index].stdout, true) }}"
      dlt:
        organization: "{{item.0 }}"
        peerIndex: "{{item.1}}"
      availabilityZone: "{{availability_zones[item.1]}}"
      env:
        CHAINCODE_LOG_LEVEL: "{{k8s_fabric_chaincode_loglevel}}"
  loop: "{{ k8s_fabric_chaincode_orgs | org_peer_pairs }}"
  loop_control:
    index_var: index
  when: k8s_fabric_chaincode_external or k8s_fabric_chaincode_ccaas
  tags:
    - prepare_chaincode_upgrade
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{k8s_fabric_chaincode_azs}}"

- name: Approve chaincode on each org
  command:
    argv:
      - scripts/approve-chaincode.sh
      - "{{ item.name }}"
      - "{{ item.msp }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      - "{{ k8s_fabric_chaincode_endorsement_policy }}"
      - "{{ next_sequence }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  when: not committed
  # TODO: only approve on luther orgs!
  loop: "{{ k8s_fabric_chaincode_orgs }}"
  register: approve_result
  changed_when: '"has approved the chaincode" in approve_result.stderr'
  tags:
    - prepare_chaincode_upgrade

- name: Generate approval script
  command:
    argv:
      - scripts/generate-approval-script.sh
      - "{{ k8s_fabric_chaincode_orgs.0.name }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      - "{{ k8s_fabric_chaincode_endorsement_policy }}"
      - "{{ next_sequence }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  when: not committed
  register: approval_script
  tags:
    - prepare_chaincode_upgrade

- name: Check chaincode approvals
  command:
    argv:
      - scripts/commit-readiness-report.sh
      - "{{ k8s_fabric_chaincode_orgs.0.name }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      - "{{ k8s_fabric_chaincode_endorsement_policy }}"
      - "{{ next_sequence }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  when: not committed
  ignore_errors: true
  register: readiness_report
  changed_when: false
  tags:
    - prepare_chaincode_upgrade

- name: Display approval information
  debug:
    msg:
      - "{{readiness_report.stdout}}"
      - "{{approval_script.stdout}}"
  when: not committed
  loop: "{{ k8s_fabric_chaincode_orgs }}"
  tags:
    - prepare_chaincode_upgrade

- name: Wait for chaincode approvals
  command:
    argv:
      - scripts/commit-readiness.sh
      - "{{ k8s_fabric_chaincode_orgs.0.name }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      - "{{ k8s_fabric_chaincode_endorsement_policy }}"
      - "{{ next_sequence }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  when:
    - not committed
    - approve_result.changed
  loop: "{{ k8s_fabric_chaincode_orgs }}"
  register: readiness_result
  until: readiness_result is succeeded
  retries: 5
  delay: 3
  changed_when: false

- name: Commit chaincode
  command:
    argv: "{{ base_args + luther_orgs + external_orgs }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  vars:
    base_args:
      - scripts/commit-chaincode.sh
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
      - "{{ k8s_fabric_chaincode_endorsement_policy }}"
      - "{{ next_sequence }}"
      - "{{ k8s_fabric_chaincode_orgs[0].name }}"
    luther_orgs: "{{ k8s_fabric_chaincode_orgs | map('luther_fabric_org_domain', k8s_fabric_network_domain_root) | list }}"
    external_orgs: "{{ k8s_fabric_chaincode_external_orgs | json_query('[*].domain') | list }}"
  environment: "{{ kubectl_env }}"
  when: not committed
  register: commit_result

- name: Wait for chaincode commit
  command:
    argv:
      - scripts/query-committed.sh
      - "{{ k8s_fabric_chaincode_orgs.0.name }}"
      - "{{ k8s_fabric_chaincode_name }}"
      - "{{ k8s_fabric_chaincode_version }}"
    chdir: "{{ k8s_fabric_scripts_workdir }}"
  environment: "{{ kubectl_env }}"
  when: not committed
  register: query_result
  until: query_result is succeeded
  retries: 5
  delay: 3
  changed_when: false

- name: Look up unused chaincodes
  k8s_info:
    api_version: v1
    kind: Service
    label_selectors:
      - app.kubernetes.io/name = chaincode
      - app.kubernetes.io/version != {{ k8s_fabric_chaincode_version }}
  environment: "{{ kubectl_env }}"
  register: chaincodes
  when: k8s_fabric_chaincode_external or k8s_fabric_chaincode_ccaas

- name: Remove unused chaincodes
  kubernetes.core.helm:
    state: absent
    name: "{{ item.metadata.labels['app.kubernetes.io/instance'] }}"
    namespace: "{{ item.metadata.namespace }}"
    wait: true
  environment: "{{ kubectl_env }}"
  loop: "{{ chaincodes.resources }}"
  when: k8s_fabric_chaincode_external or k8s_fabric_chaincode_ccaas

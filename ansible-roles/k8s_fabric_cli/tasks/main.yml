---
# tasks file for k8s_fabric_cli

- name: K8s namespace exists
  k8s:
    name: "{{k8s_fabric_cli_namespace}}"
    api_version: v1
    kind: Namespace
    state: present
  environment: "{{ kubectl_env }}"

- name: Fabric crypto-config secrets exists
  k8s:
    namespace: "{{k8s_fabric_cli_namespace}}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{k8s_fabric_cli_crypto_config_secret_name}}"
      type: Opaque
      data:
        crypto-config.zip: "{{k8s_fabric_cli_crypto_config}}"
  no_log: True
  environment: "{{ kubectl_env }}"
  when: k8s_fabric_cli_crypto_config

- name: Fabric channel-artifacts configmap exists
  k8s:
    namespace: "{{k8s_fabric_cli_namespace}}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{k8s_fabric_cli_channel_artifacts_configmap_name}}"
      binaryData:
        channel-artifacts.zip: "{{k8s_fabric_cli_channel_artifacts}}"
  environment: "{{ kubectl_env }}"
  when: k8s_fabric_cli_channel_artifacts

- name: Fabric collections configmap exists
  k8s:
    namespace: "{{k8s_fabric_cli_namespace}}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{k8s_fabric_cli_collections_configmap_name}}"
      binaryData:
        collections.json: "{{k8s_fabric_cli_collections}}"
  environment: "{{ kubectl_env }}"
  when: k8s_fabric_cli_collections

- name: Create Fabric CLI Service Accounts
  k8s:
    namespace: "{{k8s_fabric_cli_namespace}}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      automountServiceAccountToken: true
      metadata:
        name: "{{ item.key }}"
        annotations:
          eks.amazonaws.com/role-arn: "{{ item.value }}"
  environment: "{{ kubectl_env }}"
  loop: "{{ k8s_fabric_cli_service_account_iam_role_arns | dict2items }}"

- name: Helm chart exists
  synchronize:
    src: fabric-cli/
    dest: "{{k8s_fabric_cli_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_cli_helm_chart_path}}"
    name: "fabric-cli{{item}}-{{k8s_fabric_cli_org}}"
    namespace: "{{k8s_fabric_cli_namespace}}"
    wait: true
    values:
      serviceAccount:
        name: "{{k8s_fabric_cli_service_account}}"
      global:
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_cli_version}}"
        aws:
          region: "{{k8s_fabric_cli_cert_bucket_region or shiro_phylum_s3_region | default('')}}"
          staticBucket: "{{k8s_fabric_cli_cert_bucket or shiro_phylum_s3_bucket | default('')}}"
      dlt:
        organization: "{{k8s_fabric_cli_org}}"
        mspID: "{{k8s_fabric_cli_msp}}"
        domain: "{{k8s_fabric_cli_domain_root}}"
        peerIndex: "{{item}}"
        cryptoConfigSecret: "{{k8s_fabric_cli_crypto_config_secret_name}}"
        channelArtifactsConfigMap: "{{k8s_fabric_cli_channel_artifacts_configmap_name}}"
        collectionsConfigMap: "{{k8s_fabric_cli_collections_configmap_name}}"
      substrate:
        version: "{{k8s_fabric_cli_substrate_version or shiro_phylum_substrate_version | default('')}}"
      dockerChaincode: "{{k8s_fabric_cli_chaincode_docker}}"
      availabilityZone: "{{availability_zones[item]}}"
      awsCLIVersion: "{{k8s_fabric_cli_aws_cli_version}}"
      local: "{{mars_local | default(false)}}"
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{k8s_fabric_cli_azs}}"
  loop: "{{ range(0, k8s_fabric_cli_org_size | int) | list }}"

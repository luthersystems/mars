---
# tasks file for k8s_fabric_ca

- name: K8s namespace exists
  k8s:
    name: "{{k8s_fabric_ca_namespace}}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
    AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
    KUBECONFIG: "{{kubectl_config_path}}"

- name: retrieve ca PV data
  include_role:
    name: k8s_pv_data
  vars:
    org_selector: "fabric/organization={{k8s_fabric_ca_org}}"
    k8s_pv_data_selectors: "{{k8s_fabric_ca_pv_selectors + [org_selector]}}"

- name: Helm chart exists
  synchronize:
    src: fabric-ca/
    dest: "{{k8s_fabric_ca_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes

- name: Helm Chart is installed
  command:
    argv:
      - helm
      - upgrade
      - --install
      - --namespace={{k8s_fabric_ca_namespace}}
      - --set=global.lutherProjectID={{luther_project_id}}
      - --set=global.lutherEnv={{luther_env}}
      - --set=global.hyperledger.fabricVersion={{k8s_fabric_ca_version}}
      - --set=dlt.organization={{k8s_fabric_ca_org}}
      - --set=dlt.domain={{k8s_fabric_ca_domain_root}}
      - --set=dlt.keyfile={{k8s_fabric_ca_keyfile}}
      - --set=global.aws.region={{shiro_phylum_s3_region}}
      - --set=global.aws.staticBucket={{shiro_phylum_s3_bucket}}
      - --set=persistentVolume.storageSize={{k8s_fabric_ca_storage_size}}
      - --set=availabilityZone={{k8s_pv_data_replica_azs[0]}}
      - --set=service.idleTimeout={{k8s_fabric_ca_lb_idle_timeout}}
      - --set=service.useNLB={{k8s_fabric_ca_use_nlb}}
      - --wait
      - "{{k8s_fabric_ca_helm_release}}"
      - "{{k8s_fabric_ca_helm_chart_path}}"
  environment:
    AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
    AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
    KUBECONFIG: "{{kubectl_config_path}}"

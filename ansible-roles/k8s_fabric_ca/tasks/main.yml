---
# tasks file for k8s_fabric_ca

- name: K8s namespace exists
  k8s:
    name: "{{k8s_fabric_ca_namespace}}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
    AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
    KUBECONFIG: "{{kubectl_config_path}}"

- name: retrieve ca PV data
  include_role:
    name: k8s_pv_data
  vars:
    org_selector: "fabric/organization={{k8s_fabric_ca_org}}"
    k8s_pv_data_selectors: "{{k8s_fabric_ca_pv_selectors + [org_selector]}}"

- name: Helm chart exists
  synchronize:
    src: fabric-ca/
    dest: "{{k8s_fabric_ca_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_ca_helm_chart_path}}"
    name: "{{k8s_fabric_ca_helm_release}}"
    namespace: "{{k8s_fabric_ca_namespace}}"
    wait: true
    values:
      global:
        lutherProjectID: "{{luther_project_id}}"
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_ca_version}}"
        aws:
          region: "{{shiro_phylum_s3_region}}"
          staticBucket: "{{shiro_phylum_s3_bucket}}"
      dlt:
        organization: "{{k8s_fabric_ca_org}}"
        domain: "{{k8s_fabric_ca_domain_root}}"
        keyfile: "{{k8s_fabric_ca_keyfile}}"
      persistentVolume:
        storageSize: "{{k8s_fabric_ca_storage_size}}"
      availabilityZone: "{{k8s_pv_data_replica_azs[0]}}"
      service:
        idleTimeout: "{{k8s_fabric_ca_lb_idle_timeout}}"
        useNLB: "{{k8s_fabric_ca_use_nlb}}"
  environment: "{{ kubectl_env }}"

---
# tasks file for k8s_fabric_ca

- name: K8s namespace exists
  k8s:
    name: "{{k8s_fabric_ca_namespace}}"
    api_version: v1
    kind: Namespace
    state: present
  environment: "{{ kubectl_env }}"

- name: retrieve ca PV data
  include_role:
    name: k8s_pv_data
  vars:
    org_selector: "fabric/organization={{k8s_fabric_ca_org}}"
    k8s_pv_data_selectors: "{{k8s_fabric_ca_pv_selectors + [org_selector]}}"

- name: Create Fabric CA Service Accounts
  k8s:
    namespace: "{{k8s_fabric_ca_namespace}}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      automountServiceAccountToken: true
      metadata:
        name: "{{ item.key }}"
        annotations:
          eks.amazonaws.com/role-arn: "{{ item.value }}"
  environment: "{{ kubectl_env }}"
  loop: "{{ k8s_fabric_ca_service_account_iam_role_arns | dict2items }}"

- name: Helm chart exists
  synchronize:
    src: fabric-ca/
    dest: "{{k8s_fabric_ca_helm_chart_path}}"
    delete: yes
    recursive: yes
    owner: no
    group: no
    use_ssh_args: yes

- name: Create storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_ca_namespace}}"
    k8s_pvc_name: "storage-fabric-ca-{{k8s_fabric_ca_org}}"
    k8s_pvc_component: fabric
    k8s_pvc_part_of: bcca
    k8s_pvc_storage_size: "{{k8s_fabric_ca_storage_size}}"
    k8s_pvc_storage_class: "{{k8s_fabric_ca_storage_class}}"
    k8s_pvc_volume_type_override: "{{k8s_fabric_ca_volume_type_override}}"
  when: k8s_fabric_ca_separate_pvc

- name: Fabric crypto-config secrets exists
  k8s:
    namespace: "{{k8s_fabric_ca_namespace}}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{k8s_fabric_ca_crypto_config_secret_name}}"
      type: Opaque
      data:
        crypto-config.zip: "{{k8s_fabric_ca_crypto_config}}"
  no_log: True
  environment: "{{ kubectl_env }}"
  when: k8s_fabric_ca_crypto_config

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_ca_helm_chart_path}}"
    name: "{{k8s_fabric_ca_helm_release}}"
    namespace: "{{k8s_fabric_ca_namespace}}"
    wait: true
    values:
      serviceAccount:
        name: "{{k8s_fabric_ca_service_account}}"
      global:
        lutherProjectID: "{{luther_project_id}}"
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_ca_version}}"
        aws:
          region: "{{k8s_fabric_ca_cert_bucket_region or shiro_phylum_s3_region | default('')}}"
          staticBucket: "{{k8s_fabric_ca_cert_bucket or shiro_phylum_s3_bucket | default('')}}"
      dlt:
        organization: "{{k8s_fabric_ca_org}}"
        domain: "{{k8s_fabric_ca_domain_root}}"
        keyfile: "{{k8s_fabric_ca_keyfile}}"
        cryptoConfigSecret: "{{k8s_fabric_ca_crypto_config_secret_name}}"
      persistentVolume:
        create: "{{not k8s_fabric_ca_separate_pvc}}"
        storageSize: "{{k8s_fabric_ca_storage_size}}"
        storageClassName: "{{k8s_fabric_ca_storage_class}}"
        typeOverride: "{{k8s_fabric_ca_volume_type_override}}"
      availabilityZone: "{{availability_zones[0]}}"
      service:
        type: "{{k8s_fabric_ca_service_type}}"
        idleTimeout: "{{k8s_fabric_ca_lb_idle_timeout}}"
        useNLB: "{{k8s_fabric_ca_use_nlb}}"
      awsCLIVersion: "{{k8s_fabric_ca_aws_cli_version}}"
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{[k8s_fabric_ca_az] or k8s_pv_data_replica_azs}}"

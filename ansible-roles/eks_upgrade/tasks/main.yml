---
# tasks file for eks_upgrade

- name: check kube-proxy version
  kubernetes.core.k8s_info:
    api_version: v1
    kind: DaemonSet
    name: kube-proxy
    namespace: kube-system
  environment: "{{ kubectl_env }}"
  register: kube_proxy

- name: check coredns version
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    name: coredns
    namespace: kube-system
  environment: "{{ kubectl_env }}"
  register: coredns

- name: check CNI version
  kubernetes.core.k8s_info:
    api_version: v1
    kind: DaemonSet
    name: aws-node
    namespace: kube-system
  environment: "{{ kubectl_env }}"
  register: cni

- name: set installed version facts
  set_fact:
    kube_proxy_installed_ver: "{{ kube_proxy_installed_image.split(':').1 }}"
    coredns_installed_ver: "{{ coredns_installed_image.split(':').1 }}"
    cni_installed_ver: "{{ cni_installed_image.split(':').1 }}"
  vars:
    kube_proxy_installed_image: "{{ kube_proxy.resources.0.spec.template.spec.containers.0.image }}"
    coredns_installed_image: "{{ coredns.resources.0.spec.template.spec.containers.0.image }}"
    cni_installed_image: "{{ cni.resources.0.spec.template.spec.containers.0.image }}"

- name: update kube-proxy
  command:
    argv:
      - kubectl
      - set
      - image
      - daemonset.apps/kube-proxy
      - -n
      - kube-system
      - "kube-proxy={{ eks_upgrade_kube_proxy_image }}"
  environment: "{{ kubectl_env }}"
  when: kube_proxy_installed_ver != eks_upgrade_kube_proxy_version

- name: wait for kube-proxy to update
  kubernetes.core.k8s_info:
    api_version: v1
    kind: DaemonSet
    name: kube-proxy
    namespace: kube-system
  environment: "{{ kubectl_env }}"
  register: kube_proxy
  vars:
    status: "{{ kube_proxy.resources.0.status }}"
  retries: 30
  delay: 10
  until:
    - (status.updatedNumberScheduled | default(0)) == status.desiredNumberScheduled
    - status.numberReady == status.desiredNumberScheduled
  when: kube_proxy_installed_ver != eks_upgrade_kube_proxy_version

- name: update coredns
  command:
    argv:
      - kubectl
      - set
      - image
      - deployment.apps/coredns
      - -n
      - kube-system
      - "coredns={{ eks_upgrade_coredns_image }}"
  environment: "{{ kubectl_env }}"
  when: coredns_installed_ver != eks_upgrade_coredns_version

- name: wait for coredns to update
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Deployment
    name: coredns
    namespace: kube-system
  environment: "{{ kubectl_env }}"
  register: coredns
  vars:
    status: "{{ coredns.resources.0.status }}"
  retries: 30
  delay: 10
  until: (status.updatedReplicas | default(0)) == status.replicas
  when: coredns_installed_ver != eks_upgrade_coredns_version

- name: incrementally upgrade CNI
  include_tasks: upgrade-cni.yml
  loop: "{{ incr_cni_versions }}"
  loop_control:
    loop_var: incr_cni_version
  when: cni_installed_ver != eks_upgrade_cni_version
  vars:
    newer_cni_vers: "{{ eks_upgrade_cni_versions | select('version', cni_installed_ver, '>') }}"
    incr_cni_versions: "{{ newer_cni_vers | select('version', eks_upgrade_cni_version, '<=') }}"

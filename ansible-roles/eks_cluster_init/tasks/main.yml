---
# tasks file for eks_cluster_init

- name: Enable IAM admin role access
  kubernetes.core.k8s:
    kind: ConfigMap
    name: aws-auth
    namespace: kube-system
    definition:
      data:
        mapRoles: "{{ map_roles | to_nice_yaml(indent=2) }}"
  vars:
    map_roles:
      - rolearn: "{{ eks_cluster_init_eks_worker_iam_role_arn }}"
        username: !unsafe system:node:{{EC2PrivateDNSName}}
        groups:
          - system:bootstrappers
          - system:nodes
      - rolearn: "{{ eks_cluster_init_k8s_admin_role_arn }}"
        username: luther:admin
        groups:
          - system:masters
  environment: "{{ kubectl_env }}"
  when:
    - eks_cluster_init_configure_aws_auth
    - eks_cluster_init_eks_worker_iam_role_arn is defined
    - eks_cluster_init_k8s_admin_role_arn is defined

- name: Get all StorageClasses
  kubernetes.core.k8s_info:
    kind: StorageClass
    api_version: storage.k8s.io/v1
  register: storage_classes
  environment: "{{ kubectl_env }}"

- name: Remove default annotation from all StorageClasses
  kubernetes.core.k8s:
    kind: StorageClass
    name: "{{ item.metadata.name }}"
    definition:
      metadata:
        annotations:
          storageclass.kubernetes.io/is-default-class: "false"
  loop: "{{ storage_classes.resources }}"
  when: eks_cluster_init_storage_kms_key_id is defined
  environment: "{{ kubectl_env }}"

- name: Enable volume resizing on all StorageClass objects
  kubernetes.core.k8s:
    kind: StorageClass
    name: "{{ item.metadata.name }}"
    definition:
      allowVolumeExpansion: true
  loop: "{{ storage_classes.resources }}"
  environment: "{{ kubectl_env }}"

- name: Create encrypted StorageClasses and set default
  kubernetes.core.k8s:
    api_version: storage.k8s.io/v1
    kind: StorageClass
    name: "{{ item }}-encrypted"
    definition:
      provisioner: kubernetes.io/aws-ebs
      parameters:
        type: "{{ item }}"
        fsType: ext4
        encrypted: "true"
        kmsKeyId: "{{ eks_cluster_init_storage_kms_key_id }}"
      reclaimPolicy: "{{ eks_cluster_init_volume_reclaim_policy }}"
      volumeBindingMode: WaitForFirstConsumer
      allowVolumeExpansion: true
      metadata:
        annotations:
          storageclass.kubernetes.io/is-default-class: "{{ 'true' if item == eks_cluster_init_encrypted_storageclass else 'false' }}"
  loop: "{{ eks_cluster_init_available_encrypted_storage_types }}"
  when: eks_cluster_init_storage_kms_key_id is defined
  environment: "{{ kubectl_env }}"

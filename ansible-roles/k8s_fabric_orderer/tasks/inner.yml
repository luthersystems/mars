---
# tasks file for k8s_fabric_orderer loop

- name: Create storage PVC
  include_role:
    name: k8s_pvc
  vars:
    k8s_pvc_namespace: "{{k8s_fabric_orderer_namespace}}"
    k8s_pvc_name: "storage-fabric-orderer{{item}}"
    k8s_pvc_component: bcord
    k8s_pvc_part_of: fabric
    k8s_pvc_storage_size: "{{k8s_fabric_orderer_storage_size}}"
  when: k8s_fabric_orderer_separate_pvc

- name: Helm Chart is installed
  kubernetes.core.helm:
    chart_ref: "{{k8s_fabric_orderer_helm_chart_path}}"
    name: "fabric-orderer{{item}}"
    namespace: "{{k8s_fabric_orderer_namespace}}"
    wait: true
    values:
      global:
        lutherProjectID: "{{luther_project_id}}"
        lutherEnv: "{{luther_env}}"
        hyperledger:
          fabricVersion: "{{k8s_fabric_version}}"
        aws:
          region: "{{k8s_fabric_orderer_cert_bucket_region or shiro_phylum_s3_region}}"
          staticBucket: "{{k8s_fabric_orderer_cert_bucket or shiro_phylum_s3_bucket}}"
      dlt:
        organization: "{{k8s_fabric_orderer_org}}"
        organizationIndex: "{{item}}"
        domain: "{{k8s_fabric_orderer_domain_root}}"
        cryptoConfigSecret: "{{crypto_config_secret}}"
        channelArtifactsConfigMap: "{{channel_artifacts_configmap}}"
        hcs: "{{k8s_fabric_orderer_hcs}}"
        hcsOperatorId: "{{k8s_fabric_orderer_hcs_operator_id}}"
        hcsOperatorPrivateKey: "{{k8s_fabric_orderer_hcs_operator_private_key}}"
      image:
        repository: "{{k8s_fabric_orderer_image_repository}}"
      startService: "{{k8s_fabric_orderer_start_service}}"
      persistentVolume:
        create: "{{not k8s_fabric_orderer_separate_pvc}}"
        storageSize: "{{k8s_fabric_orderer_storage_size}}"
      logLevel: "{{k8s_fabric_orderer_log_level}}"
      availabilityZone: "{{k8s_fabric_orderer_azs[item]}}"
      service:
        idleTimeout: "{{k8s_fabric_orderer_lb_idle_timeout}}"
        useNLB: "{{k8s_fabric_orderer_use_nlb}}"
  environment: "{{ kubectl_env }}"
  vars:
    availability_zones: "{{k8s_fabric_orderer_azs or k8s_pv_data_replica_azs}}"
    crypto_config_secret: "{{k8s_fabric_orderer_crypto_config_secret_name}}"
    channel_artifacts_configmap: "{{k8s_fabric_orderer_channel_artifacts_configmap_name}}"

- name: Upgrade pauser has run
  when: is_fabric_upgrade | bool
  command:
    argv:
    - "{{k8s_fabric_scripts_dir}}/upgrade-pauser.sh"
    chdir: "{{k8s_fabric_scripts_workdir}}"
  environment:
    PAUSING_AT: "orderer"
    WHICH: "{{item}}"
    CHANNEL: "luther"
    ORDERERC: "{{k8s_fabric_orderer_cluster_size}}"
    PEER_ORG: "none"
    AWS_ACCESS_KEY_ID: "{{kubectl_aws_access_key_id}}"
    AWS_SECRET_ACCESS_KEY: "{{kubectl_aws_secret_access_key}}"
    AWS_SESSION_TOKEN: "{{kubectl_aws_session_token}}"
    KUBECONFIG: "{{kubectl_config_path}}"
